/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package poll.q.poc;

import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.util.JsonFormat;
import io.sonarcloud.shared.events.Events;
import java.util.Date;
import java.util.List;
import software.amazon.awssdk.services.sqs.SqsClient;
import software.amazon.awssdk.services.sqs.model.DeleteMessageRequest;
import software.amazon.awssdk.services.sqs.model.Message;
import software.amazon.awssdk.services.sqs.model.ReceiveMessageRequest;

public class Receive {
  public static void main(String[] args) throws InvalidProtocolBufferException {
    String queueUrl = System.getenv("SQS_QUEUE_URL");
    if (queueUrl == null) {
      System.err.println("Error: SQS_QUEUE_URL environment variable not set. Set it to the URL of the queue.");
      System.exit(1);
    }

    SqsClient sqs = SqsClient.builder().build();

    while (true) {
      ReceiveMessageRequest receiveRequest = ReceiveMessageRequest.builder()
        .queueUrl(queueUrl)
        // enables long polling; valid values: [0, 20]
        // See also: https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html
        .waitTimeSeconds(20)
        .maxNumberOfMessages(10)
        .build();
      List<Message> messages = sqs.receiveMessage(receiveRequest).messages();

      System.out.printf("Received %d message(s) at %s\n", messages.size(), new Date());

      for (Message m : messages) {
        System.out.println(m);

        String body = m.body();
        Events.Event event = parseEvent(body);
        if (event == null) {
          System.out.println("Could not parse message as an Event");
        } else if (!"pull-request-opened".equals(event.getType())) {
          System.out.printf("Unsupported event type: '%s'\n", event.getType());
        } else {
          Events.PullRequestOpenedEvent.Builder builder = Events.PullRequestOpenedEvent.newBuilder();
          JsonFormat.parser().ignoringUnknownFields().merge(body, builder);
          System.out.println(builder.build());
        }

        DeleteMessageRequest deleteRequest = DeleteMessageRequest.builder()
          .queueUrl(queueUrl)
          .receiptHandle(m.receiptHandle())
          .build();
        sqs.deleteMessage(deleteRequest);
      }

      if (!messages.isEmpty()) {
        break;
      }
    }
  }

  private static Events.Event parseEvent(String body) {
    try {
      Events.Event.Builder eventBuilder = Events.Event.newBuilder();
      JsonFormat.parser().ignoringUnknownFields().merge(body, eventBuilder);
      return eventBuilder.build();
    } catch (InvalidProtocolBufferException e) {
      return null;
    }
  }
}
